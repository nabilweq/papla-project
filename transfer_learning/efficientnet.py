# -*- coding: utf-8 -*-
"""EfficientNet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mKGqyRi_B3IlDiPPw_iUCsTMrQ4cLI6P
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import tensorflow as tf

import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt
import os

dataset='/content/drive/MyDrive/papladataset/efficentnet_training_images/'

dataset_path=os.listdir(dataset)

print (dataset_path)  

print("Types of classes labels found: ", len(dataset_path))

class_labels = []





for item in dataset_path:
 
 all_classes = os.listdir(dataset + '/' +item)


 
 for room in all_classes:
   
   if room.lower().endswith(".jpg"):

    class_labels.append((item, str('dataset_path' + '/' +item) + '/' + room))
  
   

  
    
df = pd.DataFrame(data=class_labels, columns=['Labels', 'image'])
print(df.head())
print(df.tail())

print("Total number of images in the dataset: ", len(df))

label_count = df['Labels'].value_counts()
print(label_count)

import cv2
path = 'dataset/'
im_size = 224

images = []
labels = []

for i in dataset_path:
    data_path = dataset + str(i)  
    filenames = [i for i in os.listdir(data_path) ]
   
    for f in filenames:
        if f.lower().endswith(".jpg"):
          
          img = cv2.imread(data_path + '/' + f)
          try:
            img = cv2.resize(img, (im_size, im_size))
            images.append(img)
            labels.append(i)
          except:
            print(data_path + '/' + f)

"""/content/drive/MyDrive/papladataset/efficentnet_training_images/first/training_data_96_96.npy
/content/drive/MyDrive/papladataset/efficentnet_training_images/first/output
/content/drive/MyDrive/papladataset/efficentnet_training_images/third/IMG_5734.AAE
unwanted files

"""

images = np.array(images)

images = images.astype('float32') / 255.0
images.shape

from sklearn.preprocessing import LabelEncoder , OneHotEncoder
y=df['Labels'].values
print(y)

y_labelencoder = LabelEncoder ()
y = y_labelencoder.fit_transform (y)
print (y)

y=y.reshape(-1,1)

from sklearn.compose import ColumnTransformer
ct = ColumnTransformer([('my_ohe', OneHotEncoder(), [0])], remainder='passthrough')
Y = ct.fit_transform(y) #.toarray()
print(Y[:5])
print(Y[35:])

print(Y.shape)

from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split


images, Y = shuffle(images, Y, random_state=1)


train_x, test_x, train_y, test_y = train_test_split(images, Y, test_size=0.05, random_state=415)

#inpect the shape of the training and testing.
print(train_x.shape)
print(train_y.shape)
print(test_x.shape)
print(test_y.shape)

"""transfer leraning"""

import cv2
import numpy as np
from matplotlib.pyplot import imread
from matplotlib.pyplot import imshow
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.imagenet_utils import decode_predictions
from tensorflow.keras.applications.imagenet_utils import preprocess_input
from tensorflow.keras import layers
from tensorflow.keras.applications import EfficientNetB0
import numpy as np
import tensorflow as tf

import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt
import os


NUM_CLASSES = 3
IMG_SIZE = 224

def build_model(num_classes):
    inputs = layers.Input(shape=(IMG_SIZE, IMG_SIZE, 3))
    #x = img_augmentation(inputs)
    x = inputs
    model = EfficientNetB0(include_top=False, input_tensor=x, weights="imagenet")

    # Freeze the pretrained weights
    model.trainable = False

    # Rebuild top
    x = layers.GlobalAveragePooling2D(name="avg_pool")(model.output)
    x = layers.BatchNormalization()(x)

    top_dropout_rate = 0.2
    x = layers.Dropout(top_dropout_rate, name="top_dropout")(x)
    outputs = layers.Dense(NUM_CLASSES, activation="softmax", name="pred")(x)

    # Compile
    model = tf.keras.Model(inputs, outputs, name="EfficientNet")
    optimizer = tf.keras.optimizers.Adam(learning_rate=1e-2)
    model.compile(
        optimizer=optimizer, loss="categorical_crossentropy", metrics=["accuracy"]
    )
    return model

model = build_model(num_classes=NUM_CLASSES)

import matplotlib.pyplot as plt


def plot_hist(hist):
    plt.plot(hist.history["accuracy"])
    #plt.plot(hist.history["val_accuracy"])
    plt.title("model accuracy")
    plt.ylabel("accuracy")
    plt.xlabel("epoch")
    plt.legend(["train", "validation"], loc="upper left")
    plt.show()

#usingB0

epochs = 30 
hist = model.fit(train_x, train_y, epochs=epochs, verbose=2)
plot_hist(hist)

#usingB1

epochs = 30 
hist = model.fit(train_x, train_y, epochs=epochs, verbose=2)
plot_hist(hist)

#using B7
epochs = 30 
hist = model.fit(train_x, train_y, epochs=epochs, verbose=2)
plot_hist(hist)

preds = model.evaluate(test_x, test_y)
print ("Loss = " + str(preds[0]))
print ("Test Accuracy = " + str(preds[1]))